unit Main;

interface

uses
  Form2Garden,
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, MMSystem, MPlayer,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls,
  Math,
  Generics.Collections, GlobalData, ConstData, F1_Logical,
  System.ImageList, Vcl.ImgList, System.Actions, Vcl.ActnList, Vcl.Grids,
  Vcl.Menus, Vcl.ToolWin, Vcl.ComCtrls, AddNewCulture, AddNewGarden,
  ShowALL;

type
  TForm1 = class(TForm)
    PaintBox1: TPaintBox;
    MainMenu1: TMainMenu;
    N1: TMenuItem;
    ToolBar1: TToolBar;
    ImageList1: TImageList;
    ToolButton1: TToolButton;
    ActionList: TActionList;
    ActionSave: TAction;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    ToolButton4: TToolButton;
    ActionPlus: TAction;
    ActionMinus: TAction;
    N2: TMenuItem;
    N4: TMenuItem;
    N5: TMenuItem;
    N7: TMenuItem;
    N8: TMenuItem;
    ActionShowAll: TAction;
    Label1: TLabel;
    ToolButton5: TToolButton;
    ToolButton6: TToolButton;
    ToolButton7: TToolButton;
    procedure PaintRect(const x, y: integer; const color: Tcolor;
      const brush: Tcolor);
    procedure PaintBox1Paint(Sender: TObject);
    procedure ActionMinusExecute(Sender: TObject);
    procedure ActionPlusExecute(Sender: TObject);
    procedure PaintBox1MouseMove(Sender: TObject; Shift: TShiftState;
      x, y: integer);
    procedure PaintBox1Click(Sender: TObject);
    procedure PaintSelection(const Point: TPoint);
    procedure PaintSelectionCtrl(const Point: TPoint);
    procedure PaintBox1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; x, y: integer);
    procedure PaintBox1MouseLeave(Sender: TObject);
    procedure ActionSaveExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ActionShowAllExecute(Sender: TObject);
  private
    dictionaryColorToId: TDictionary<integer, Tcolor>;
    gardenlist: ptgarden;
    culturelist: ptculture;
    GardenMas: TGardenMas;

    IsLBM: boolean;
    ScaleGarden: integer;
    function NegativeColor(const color: Tcolor): Tcolor;
  public
  end;

const
  PenSize = 2;

var
  CurrPoint: TPoint;
  StartPoint: TPoint;

  Form1: TForm1;

  StartPointPrintGarde: TPoint;

implementation

{$R *.dfm}

function TForm1.NegativeColor(const color: Tcolor): Tcolor;
begin
  result := RGB(255 - GetRValue(color), 255 - GetGValue(color),
    255 - GetBValue(color));
end;

procedure TForm1.PaintRect(const x, y: integer; const color: Tcolor;
  const brush: Tcolor);
var
  sizeRect: integer;

  Rect: TRect;
begin
  sizeRect := ScaleGarden;

  PaintBox1.Canvas.Pen.color := color;
  PaintBox1.Canvas.brush.color := color;

  Rect.CREATE(StartPointPrintGarde.x + x * sizeRect + PenSize,
    StartPointPrintGarde.y + y * sizeRect + PenSize, StartPointPrintGarde.x +
    (x + 1) * sizeRect, StartPointPrintGarde.y + (y + 1) * sizeRect);
  PaintBox1.Canvas.Rectangle(Rect);
end;

procedure TForm1.PaintSelection(const Point: TPoint);
var
  sizeRect: integer;

  Index_x1, Index_y1: integer;

  Rect: TRect;
begin
  sizeRect := ScaleGarden;
  Index_x1 := Point.x;
  Index_y1 := Point.y;

  if (Index_y1 >= 0) and (Index_x1 >= 0) then
    if (Index_y1 <= _GardenY) and (Index_x1 <= _GardenX) then
    begin
      PaintRect(Index_x1, Index_y1,
        IdentifyColor(GardenMas[Index_x1][Index_y1].CodGarden), clSilver);

      PaintBox1.Canvas.Pen.color :=
        NegativeColor(IdentifyColor(GardenMas[Index_x1][Index_y1].CodGarden));
      PaintBox1.Canvas.brush.color :=
        NegativeColor(IdentifyColor(GardenMas[Index_x1][Index_y1].CodGarden));

      Rect.CREATE(StartPointPrintGarde.x + Index_x1 * sizeRect + PenSize +
        sizeRect div 4, StartPointPrintGarde.y + Index_y1 * sizeRect + PenSize +
        sizeRect div 4, StartPointPrintGarde.x + (Index_x1 + 1) * sizeRect -
        sizeRect div 4, StartPointPrintGarde.y + (Index_y1 + 1) * sizeRect -
        sizeRect div 4);
      PaintBox1.Canvas.Rectangle(Rect);
    end;
end;

procedure TForm1.PaintSelectionCtrl(const Point: TPoint);
  procedure ClearPole(const IndexX, IndexY: integer);
  var
    i, j: integer;
  begin

    if IndexX <= _GardenX then
      for j := StartPoint.x to IndexX do
        for i := IndexY + 1 to _GardenY do
        begin
          PaintRect(j, i, (IdentifyColor(GardenMas[j][i].CodGarden)), clSilver);
        end;

    if IndexY <= _GardenY then
      for j := StartPoint.y to _GardenY do
        for i := IndexX + 1 to _GardenX do
        begin
          PaintRect(i, j, IdentifyColor(GardenMas[i][j].CodGarden), clSilver);
        end;
  end;

var
  Index_x1, Index_y1: integer;
  i, j: integer;

  Rect: TRect;

  sizeRect: integer;
begin
  Index_x1 := Point.x;
  Index_y1 := Point.y;

  if (Index_y1 >= 0) and (Index_x1 >= 0) then
    if (Index_y1 <= _GardenY) and (Index_x1 <= _GardenX) then
    begin
      for j := StartPoint.y to Index_y1 do
        for i := StartPoint.x to Index_x1 do
        begin
          // PaintRect(i, j, NegativeColor(IdentifyColor(GardenMas[i][j].CodGarden)
          // ), clWhite);
          sizeRect := ScaleGarden;

          PaintBox1.Canvas.Pen.color :=
            NegativeColor(IdentifyColor(GardenMas[i][j].CodGarden));
          PaintBox1.Canvas.brush.color :=
            NegativeColor(IdentifyColor(GardenMas[i][j].CodGarden));

          Rect.CREATE(StartPointPrintGarde.x + i * sizeRect + PenSize +
            sizeRect div 4, StartPointPrintGarde.y + j * sizeRect + PenSize +
            sizeRect div 4, StartPointPrintGarde.x + (i + 1) * sizeRect -
            sizeRect div 4, StartPointPrintGarde.y + (j + 1) * sizeRect -
            sizeRect div 4);
          PaintBox1.Canvas.Rectangle(Rect);
        end;
      ClearPole(Index_x1, Index_y1);
    end;
end;

procedure TForm1.ActionSaveExecute(Sender: TObject);
begin
  SaveGardenMas(GardenMas);

  SaveFileColor(dictionaryColorToId);

  saveFileGarden(gardenlist);

  saveFileCulture(culturelist);

  MessageBox(Application.Handle, 'Сохранено успешно', 'Сохранение', MB_OK);
end;

procedure TForm1.ActionShowAllExecute(Sender: TObject);
begin
  Form5.FormShowAll;
end;

procedure TForm1.ActionMinusExecute(Sender: TObject);
begin

  if ScaleGarden > 18 then
  begin
    dec(ScaleGarden);
    Form1.PaintBox1.Invalidate;
    Form1.ActionPlus.Enabled := true;
    // Button_Plus.Enabled := true;
  end
  else
  begin
    Form1.ActionMinus.Enabled := true;
    // Button_Minus.Enabled := false;
  end;
end;

procedure TForm1.ActionPlusExecute(Sender: TObject);
begin
  if ScaleGarden < 30 then
  begin
    Form1.ActionMinus.Enabled := true;
    // Button_Minus.Enabled := true;
    inc(ScaleGarden);
    Form1.PaintBox1.Invalidate;
  end
  else
  begin
    Form1.ActionPlus.Enabled := true;
    // Button_Plus.Enabled := false;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  new(gardenlist);
  new(culturelist);

  Form1.Caption := NameMainForm;

  IsLBM := false;

  CurrPoint.x := 0;
  CurrPoint.y := 0;
  StartPoint.x := -1;
  StartPoint.y := -1;

  StartPointPrintGarde.x := 0;
  StartPointPrintGarde.y := 0;

  PaintBox1.Canvas.CREATE;
  ScaleGarden := 30;

  PaintBox1.Width := _GardenX * (ScaleGarden + PenSize + 1);
  PaintBox1.Height := _GardenY * (ScaleGarden + PenSize + 1);

  dictionaryColorToId := TDictionary<integer, Tcolor>.CREATE;
  try

    ReadFileColor(dictionaryColorToId);
    ReadGardenMas(GardenMas);
    readfileculture(culturelist);
    readfilegarden(gardenlist);
  except
    showmessage('ex : readfile gardenMas or color');
  end;

  if false then
  begin
    dictionaryColorToId.Clear();
    dictionaryColorToId.Add(1, clred);
    dictionaryColorToId.Add(2, clgreen);
    dictionaryColorToId.Add(3, clblue);
    dictionaryColorToId.Add(4, clblack);

    StartData;
    _CreateFirstFileGarden;
    _CreateFirstFileCulture;
    _CreateFirstFileColor
  end;
end;

procedure TForm1.PaintBox1MouseLeave(Sender: TObject);
begin

  if (CurrPoint.y <= _GardenY) and (CurrPoint.x <= _GardenX) then
    if (CurrPoint.y >= 0) and (CurrPoint.x >= 0) then
      if not IsLBM then
      begin
        PaintRect(CurrPoint.x, CurrPoint.y,
          IdentifyColor(GardenMas[CurrPoint.x][CurrPoint.y].CodGarden),
          clSilver);
      end;

end;

procedure TForm1.PaintBox1Click(Sender: TObject);
begin
  // ShowMessage(inttostr(StartPoint.x) + '|' + inttostr(StartPoint.y) + ' - ' +
  // inttostr(CurrPoint.x) + '|' + inttostr(CurrPoint.y));

  if (abs(StartPoint.x - CurrPoint.x) <> 0) or
    (abs(StartPoint.y - CurrPoint.y) <> 0) then
  begin
    if (StartPoint.x <= CurrPoint.x) and (StartPoint.y <= CurrPoint.y) then
      Form2Garden.Form2.FormShowForChangeCtrl(CurrPoint, StartPoint);
  end
  else
  begin
    Form2Garden.Form2.FormShowForChange(CurrPoint);
  end;

  IsLBM := false;

  Invalidate;

  StartPoint.x := -1;
  StartPoint.y := -1;

  CurrPoint.x := 0;
  CurrPoint.y := 0;
end;

procedure TForm1.PaintBox1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; x, y: integer);
begin
  if (Button = mbleft) then
  begin
    IsLBM := true;
    if (StartPoint.y = -1) or (StartPoint.x = -1) then
    begin
      StartPoint.x := (x - StartPointPrintGarde.x) div ScaleGarden;
      StartPoint.y := (y - StartPointPrintGarde.y) div ScaleGarden;
    end;
  end;
end;

procedure TForm1.PaintBox1MouseMove(Sender: TObject; Shift: TShiftState;
  x, y: integer);
var
  newPoint: TPoint;
begin

  if (IsLBM) then
  begin
    CurrPoint.x := (x - StartPointPrintGarde.x) div ScaleGarden;
    CurrPoint.y := (y - StartPointPrintGarde.y) div ScaleGarden;

    if (CurrPoint.y <= _GardenY) and (CurrPoint.x <= _GardenX) then
      if (CurrPoint.y >= 0) and (CurrPoint.x >= 0) then
      begin
        PaintSelectionCtrl(CurrPoint);
      end;
  end
  else
  begin

    newPoint.x := (x - StartPointPrintGarde.x) div (ScaleGarden);
    newPoint.y := (y - StartPointPrintGarde.y) div (ScaleGarden);
    if (newPoint.x <> CurrPoint.x) or (newPoint.y <> CurrPoint.y) then
    begin
      if (CurrPoint.y <= _GardenY) and (CurrPoint.x <= _GardenX) then
        if (CurrPoint.y >= 0) and (CurrPoint.x >= 0) then
        begin
          PaintRect(CurrPoint.x, CurrPoint.y,
            IdentifyColor(GardenMas[CurrPoint.x][CurrPoint.y].CodGarden),
            clSilver);
        end;

      CurrPoint := newPoint;

      if (CurrPoint.y <= _GardenY) and (CurrPoint.x <= _GardenX) then
        if (CurrPoint.y >= 0) and (CurrPoint.x >= 0) then
        begin
          PaintSelection(CurrPoint);
        end;

    end;
  end;

end;

procedure TForm1.PaintBox1Paint(Sender: TObject);
begin
  PaintBox1.Canvas.brush.color := clBtnFace;
  PaintBox1.Canvas.FillRect(PaintBox1.ClientRect);

  StartPointPrintGarde.x :=
    (PaintBox1.Width - _GardenX * (ScaleGarden + PenSize)) div 2 + 5;
  StartPointPrintGarde.y :=
    (PaintBox1.Height - _GardenY * (ScaleGarden + PenSize)) div 2 - 5;

  for var i := 0 to _GardenX do
  begin
    for var j := 0 to _GardenY do
    begin
      PaintRect(i, j, IdentifyColor(GardenMas[i][j].CodGarden), clSilver);
    end;
  end;

end;

end.
