unit uWorks;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.WinXCtrls,
  Vcl.ComCtrls, Vcl.StdCtrls, uglobaldata, uaddwork;

type
  ptworks = ^works;

  works = record
    work: worksRecord;
    next: ptworks;
  end;

  TForm7 = class(TForm)
    SplitView1: TSplitView;
    ListView1: TListView;
    SplitView2: TSplitView;
    ButtonAdd: TButton;
    ButtonOpen: TButton;
    ButtonDelete: TButton;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure createListView1(list: ptworks);
    procedure ButtonAddClick(Sender: TObject);
    procedure ButtonOpenClick(Sender: TObject);
    procedure ListView1Click(Sender: TObject);
    procedure ButtonDeleteClick(Sender: TObject);
  private
    listWorks: ptworks;

    procedure readfile(list: ptworks);
    procedure Add(const newwork: worksRecord);
    { Private declarations }
  public
    function MyShow: TModalResult;
    { Public declarations }
  end;

var
  Form7: TForm7;

implementation

{$R *.dfm}

procedure TForm7.readfile(list: ptworks);
var
  currFile: file of worksRecord;
begin
  AssignFile(currFile, NameFileWorks);
  reset(currFile);
  while not EoF(currFile) do
  begin;
    new(list^.next);
    list := list^.next;
    Read(currFile, list^.work);
  end;
  list := nil;

  Closefile(currFile);
end;

procedure TForm7.ButtonOpenClick(Sender: TObject);
var
  SelectedItem: TListItem;
  work: worksRecord;
begin
  SelectedItem := ListView1.Selected;
  if Assigned(SelectedItem) then
  begin
    work.Name := SelectedItem.Caption;
    work.Description := SelectedItem.SubItems[0];
    work.Date := SelectedItem.SubItems[1];
    if Form8.ShowForEditing(work) = mrok then
    begin
      Add(work);
    end;
  end;

  ButtonOpen.Enabled := ListView1.Selected <> nil;
  ButtonDelete.Enabled := ListView1.Selected <> nil;
end;

procedure TForm7.Add(const newwork: worksRecord);
var
  firstNode: ptworks;
begin
  firstNode := listWorks.next;

  new(listWorks.next);
  listWorks.next.work := newwork;
  listWorks.next.next := firstNode;

  createListView1(listWorks);
end;

procedure TForm7.createListView1(list: ptworks);
var
  Column: TListColumn;
  listitem: TListItem;
begin
  ListView1.Clear();

  list := list.next;
  while list <> nil do
  begin
    listitem := ListView1.Items.Add;
    listitem.Caption := list.work.Name;
    listitem.SubItems.Add(list.work.Description);
    listitem.SubItems.Add(list.work.Date);
    list := list.next;
  end;

end;

function TForm7.MyShow: TModalResult;
begin
  result := showmodal;
  createListView1(listWorks);
end;

procedure TForm7.ButtonAddClick(Sender: TObject);

var
  newwork: worksRecord;
begin
  newwork.Name := inttostr(ListView1.Items.Count);
  newwork.Description := '-';
  newwork.Date := '-';

  Add(newwork);

end;

procedure TForm7.ButtonDeleteClick(Sender: TObject);
var
  SelectedItem: TListItem;
begin
  if ListView1.Selected <> nil then
  begin
    SelectedItem := ListView1.Selected;
    if Assigned(SelectedItem) then
    begin
      DeleteGarden(SelectedItem.Caption, gardenlist);

      createListView1(listWorks);

    end;
  end
  else
  begin
    ShowMessage('Ex');
  end;
end;

procedure TForm7.FormCreate(Sender: TObject);
var
  Column: TListColumn;
begin

  Column := ListView1.Columns.Add;
  Column.Caption := 'Название дела';
  Column := ListView1.Columns.Add;
  Column.Caption := 'Описание';
  Column := ListView1.Columns.Add;
  Column.Caption := 'Запланированная дата';
  ListView1.Columns[0].Width := 150;
  ListView1.Columns[1].Width := 150;
  ListView1.Columns[2].Width := 250;

  new(listWorks);

  readfile(listWorks);
end;

procedure TForm7.FormShow(Sender: TObject);
begin
  ButtonOpen.Enabled := ListView1.Selected <> nil;
  ButtonDelete.Enabled := ListView1.Selected <> nil;

end;

procedure TForm7.ListView1Click(Sender: TObject);
begin
  ButtonOpen.Enabled := ListView1.Selected <> nil;
  ButtonDelete.Enabled := ListView1.Selected <> nil;

end;

end.
