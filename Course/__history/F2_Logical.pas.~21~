unit F2_Logical;

interface

uses
  ConstData, GLOBALdATA, SysUtils, Vcl.Dialogs, System.Generics.Collections,
  Graphics;

function CheckCultureUsing(const culture: string): boolean;
function CheckGardenUsing(const garden: string): boolean;
procedure DeleteCulture(const name: string);
procedure DeleteGarden(const name: string);

implementation

function CheckCultureUsing(const culture: string): boolean;
begin
  result := false;
  for var I := 0 to _GardenX do
  begin
    for var J := 0 to _GardenY do
    begin
      if GardenMas[I][J].Сulture.name = culture then
      begin
        result := true;
      end;
    end;
  end;
end;

procedure DeleteCulture(const name: string);
var
  list: Ptculture;
begin
  list := CultureList;
  while (list.Next <> nil) and (list.Next.culture.name <> name) do
  begin
    list := list.Next;
  end;
  if (list.Next <> nil) and (list.Next.culture.name = name) then
  begin
    list.Next := list.Next.Next;
  end;
end;

function CheckGardenUsing(const garden: string): boolean;
begin
  result := false;
  for var I := 0 to _GardenX do
  begin
    for var J := 0 to _GardenY do
    begin
      if GardenMas[I][J].CodGarden = GetIdGarden(garden) then
      begin
        result := true;
      end;
    end;
  end;
end;

procedure DeleteGarden(const name: string);
var
  list: PtGarden;
  index: integer;
begin
  index := GetIdGarden(name);
  // ShowMessage('Имя на удаление  : ' + name + ' индекс : ' + inttostr(index));

  list := GardenList;
  while (list.Next <> nil) and (list.Next.garden.CodGarden <> index) do
  begin
    list := list.Next;
  end;

  if (list.Next <> nil) and (list.Next.garden.CodGarden = index) then
  begin
    list.Next := list.Next.Next;
    // ShowMessage('id : ' + inttostr(index) + '  color : ' +
    // ColorToString(dictionaryColorToId[index]));
    dictionaryColorToId.Remove(index);
  end;
end;

end.
